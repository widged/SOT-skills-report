pipe(function(pass, res) {
			return [
				function(_){ loadTextFile("http://widged.github.io/SOT-skills-report/dist/data-raw/student_skills_for_vis_2015-08-31.csv", pass) },
				function(_){ res.student_csv = _; pass(); },
				function(_){ loadTextFile("http://widged.github.io/SOT-skills-report/dist/data-raw/Summer%20of%20Tech%20Skills%20Categories.html", pass) },
				function(_){ res.html_categories = _; pass(); },
				function(_){ loadTextFile("http://widged.github.io/SOT-skills-report/dist/data-raw/students_patch.csv", pass) },
				function(_){ res.student_patch = _; pass(); },
			];
		}).then(function(res) {
      handleFiles(res);
		});

function handleFiles({html_categories, student_csv, student_patch}) {
  document.querySelector('#categories-raw').value = html_categories;
  document.querySelector('#students-raw').value = student_csv;
  var btn = document.querySelector('button#convert');
  btn.addEventListener('click', function() {
    var html_categories = document.querySelector('#categories-raw').value;
    var student_csv = document.querySelector('#students-raw').value;
    var {skills, students} =  convertRaw(html_categories, student_csv, student_patch);
    document.querySelector('#skills-vis').value = 'export default ' +  JSON.stringify(skills, null, 2) + ';';
    document.querySelector('#students-vis').value = 'export default `' + students + '`;';
  }); 
}

function convertRaw(html_categories, student_csv, students_patch) {
  let {students, skills} = parseCsv(student_csv);
  let skillLevels = skills.slice(0); skills = null;
  students = patchStudents(students,students_patch);
  skills = convertSkillHtml(html_categories);
  skills = alignLevels(skills, skillLevels);
  return {skills, students};
}

function alignLevels(skills, skillLevels) {
  let dict = skills.names.dict;
  let students = dict.map((d) => {return {levels: {}}; });
  skillLevels.forEach(function([name, level, count, user_ids]) {
    let idx = dict.indexOf(name);
    if(idx === -1) { 
      idx = dict.length; 
      dict.push(name); 
      students[idx] = {levels: {}};
      console.log('[ADDED]', name)
    } 
    students[idx].levels[level] = user_ids;
  });
  skills.students = students;
  return skills;
}

function convertSkillHtml(skillHtml) { 
    let div = document.createElement('div');
    div.innerHTML = skillHtml;
    let lis =  div.querySelectorAll('li');
    let skills = Array.prototype.slice.call(lis).map((d) => {
      let skill = d.innerText.replace(/\s*\(\d+\)/, '');
      let type = d.parentNode.previousSibling.previousSibling.innerText;
      if(type.match(/^tool/i)) { type = 'tool'; }
      if(type.match(/^skill/i)) { type = 'skill'; }
      let category = d.parentNode.parentNode.parentNode.querySelector('td').innerText;
      return {skill, type, category};
    })
    let categories = skills.map(({category}) => category);
    let types  = skills.map(({type}) => type);
    skills = skills.map(({skill}) => skill);
    return {names: {dict: skills}, types: compactList(types), categories: compactList(categories)};
;
}

function compactList(list) {
  let dict = [];
  list = list.map((d) => {
    let idx = dict.indexOf(d);
    if(idx === -1) { idx = dict.length; dict.push(d); }
    return idx;
  });
  return {dict, list: list.join(' ')};
}


function patchStudents(students, students_patch) {
  students = students.map((d) => {
    let [user_id,school,degree,study_year,final_year] = d;
    let degree_details = degree;
    let {level, field} = {};
    
   let m = students_patch.match(new RegExp(`^(${user_id}\\s+.*?)$`, "m"));
    if(m && m[0]) { 
      let [,, level_patch, field_patch, degree_patch] = m[0].split('\t');
      level = level_patch;
      field = field_patch;
      degree = degree_patch;
    }
    return [user_id,school,level,field,degree,degree_details,study_year,final_year].join("\t");
              });
  
   students.unshift("user_id,school,level,field,degree  degree_details,study_year,final_year".split(',').join("\t"));
  return students.join('\n');
}

function parseCsv(csv, exporter) {
  let lines = csv.split(/\r?\n/);
  let labels = lines.shift().split(',');
  let students = [], skills = [], skillStudents = {};
  lines.forEach(function(line, i) { 
    let [user_id, school, degree, study_year, final_year, ...studentSkills] = line.split(',');
    students.push([user_id, school, degree, study_year,final_year]);
    studentSkills.forEach(function(skilllevel) {
      if(skilllevel.length === 0) { return; }
      if(!skillStudents.hasOwnProperty(skilllevel)) {
        skillStudents[skilllevel] = [];
      }
      skillStudents[skilllevel].push(user_id);
    });
  });

  for (let skilllevel in skillStudents) {
      let p = skilllevel.split('/');
      let level = p.pop();
      let skill = p.join('/');
      let userids = skillStudents[skilllevel];
      skills.push([skill, level, userids.length, userids.join(' ')]);
  }
  return {students, skills};
}



function loadTextFile(file, asyncReturn) {
  var request = new XMLHttpRequest();
  request.onload = function() {
    asyncReturn(this.responseText);
  };
  request.open("get", file, true);
  request.send();
}

function pipe(listFn) {
  var currentIdx = 0, fns, res = {};
  var next = function() {
    if(++currentIdx < fns.length) {
      var fn = fns[currentIdx];
      fn.apply(null, arguments);
    }
  };
  function then(lastFn) {
    fns = listFn(next, res);
    fns.push(function() { lastFn(res); });
    currentIdx = -1;
    next();
  };
  return {then};
};

